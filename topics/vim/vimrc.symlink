set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
source ~/.vundle

set nocompatible
set laststatus=2
set scrolloff=3
set showcmd
set showmode
set modelines=1
set shortmess=atI
set visualbell
set autoread
set nowrap
set incsearch
set smartcase
set hlsearch

" Invisible characters *******************************************************
set listchars=trail:.,tab:>-,eol:$
set nolist
:noremap <Leader>i :set list!<CR> " Toggle invisible chars

" Tabs ***********************************************************************
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" Indents ********************************************************************
set autoindent
set smartindent
set cindent
set copyindent

set hidden            " allow for editied buffers in the background
set cursorline
set nowrap
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set showmatch

set foldlevelstart=20 " Don't start folded
set history=1000      " keep 50 lines of command line history
set undolevels=1000
set wildmode=list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class,target

set nobackup          " do not keep a backup file, use versions instead
set noswapfile

" Fix backspace
set backspace=indent,eol,start

" Status line
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

syntax on
filetype plugin indent on

color jellybeans

let g:Powerline_symbols = 'fancy'

" Change <Leader>
let mapleader = ","

nmap <Leader>NL :set invnumber<CR>

" Managing splits
" http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/
set noea
nmap <leader><left> :leftabove vsp<CR>
nmap <leader><right> :rightbelow vsp<CR>
nmap <leader><up> :leftabove sp<CR>
nmap <leader><down> :rightbelow sp<CR>

" Fix command typos 
nmap ; :

" Tab/shift-Tab to increase/decrease indentation in visual mode.
vmap <Tab> >gv
vmap <S-Tab> <gv

noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" format JSON
"map <leader>j !python -m json.tool<CR>
map <leader>jt <Esc>:%!json_xs -f json -t json-pretty<CR>

" Filetype stuff
au FileType make set noexpandtab
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set ft=markdown
au BufNewFile,BufRead *.json set ft=javascript

" Save a file as root.
cabbrev w!! w !sudo tee % > /dev/null<CR>:e!<CR><CR>

" Quicker filetype setting:
"   :F html
" instead of
"   :set ft=html
" Can tab-complete filetype.
command! -nargs=1 -complete=filetype F set filetype=<args>

" NERDTree
let NERDTreeIgnore=['\.rbc$', '\~$']
let g:NERDMenuMode=0
map <leader>n :NERDTreeToggle<CR>
map <leader>N :NERDTreeFind<CR>

" NERDCommenter
let g:NERDCreateDefaultMappings=0
map <D-/> <plug>NERDCommenterToggle<CR>
imap <D-/> <Esc><plug>NERDCommenterToggle<CR>i

function! DoPrettyXML()
  let l:origft = &ft
  set ft=
  silent %!xmllint --format -
  1
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

nmap <f7> :tabp<CR>
nmap <f8> :tabn<CR>
