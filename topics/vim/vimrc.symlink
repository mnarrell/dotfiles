source $DOTFILES/topics/vim/plugins.vim

" General Behavior* ************************************************************
set nocompatible
set encoding=utf-8
set ff=unix
set pastetoggle=<F2>
set backspace=indent,eol,start
set hidden            " allow for editied buffers in the background
set cursorline
set nowrap
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set showmatch
set history=1000      " keep 50 lines of command line history
set undolevels=1000
set wildmode=list:longest
set wildignore=*.swp,*.bak,*.pyc,*.class,target
set nobackup          " do not keep a backup file, use versions instead
set noswapfile
set visualbell
set autoread
set nowrap

let mapleader = ","
nmap ; :
nmap <Leader>NL :set invnumber<CR> " Toggle line numbers
" nnoremap <C-D> :bd!<CR>  " Ctrl-D to quit buffer
nnoremap <leader>sv :source $MYVIMRC<CR>
map <leader>bd :Bclose<cr> " Close the current buffer
map <leader>ba :1,1000 bd!<cr> " Close all the buffers
" This is totally awesome - remap jj to escape in insert mode.  You'll never type jj anyway, so it's great!
" inoremap jj <Esc>

" Discipline *******************************************************************
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>
inoremap kj <Esc>
vnoremap kj <Esc>

" Invisible characters *********************************************************
set listchars=trail:.,tab:>-,eol:$
set nolist
noremap <Leader>i :set list!<CR> " Toggle invisible chars

" Tabs *************************************************************************
set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab
set smarttab
" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
" Next Tab
nnoremap <S-l> :tabnext<CR>
" Previous Tab
nnoremap <silent> <S-h> :tabprevious<CR>
" New Tab
" nnoremap <silent> <S-l> :tabnew<CR>

" Indents **********************************************************************
set autoindent
set smartindent
set cindent
set copyindent

" Search ***********************************************************************
nmap <Leader>HL :set invhlsearch<CR>
set incsearch
set nohlsearch

" Eyecandy *********************************************************************
syntax on
filetype plugin indent on
set background=dark
colorscheme solarized

" Tab line *********************************************************************
set tabline=%!tabber#TabLine()
let g:tabber_filename_style = 'relative'
nnoremap <C-t> :tabnew<CR>

" Status line ******************************************************************
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'

" Ctrl-P******************************************************************
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Toggle GUndo******************************************************************

nnoremap <leader>u :GundoToggle<CR>

" Splits ***********************************************************************
" http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/
set noea
nmap <leader><left> :leftabove vsp<CR>
nmap <leader><right> :rightbelow vsp<CR>
nmap <leader><up> :leftabove sp<CR>
nmap <leader><down> :rightbelow sp<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" File types ******************************************************************
augroup configgroup
  autocmd!
  autocmd VimEnter * highlight clear SignColumn
  autocmd FileType java setlocal noexpandtab
  autocmd FileType java setlocal list
  autocmd FileType java setlocal listchars=tab:+\ ,eol:-
  autocmd FileType java setlocal formatprg=par\ -w80\ -T4
  autocmd FileType ruby setlocal tabstop=2
  autocmd FileType ruby setlocal shiftwidth=2
  autocmd FileType ruby setlocal softtabstop=2
  autocmd FileType ruby setlocal commentstring=#\ %s
  autocmd FileType python setlocal commentstring=#\ %s
  autocmd FileType yaml setlocal noexpandtab
  autocmd BufEnter *.cls setlocal filetype=java
  autocmd BufEnter *.zsh-theme setlocal filetype=zsh
  autocmd BufEnter Makefile setlocal noexpandtab
  autocmd BufEnter *.sh setlocal tabstop=2
  autocmd BufEnter *.sh setlocal shiftwidth=2
  autocmd BufEnter *.sh setlocal softtabstop=2
  autocmd BufEnter *.avsc setlocal filetype=javascript
augroup END

" Save a file as root. ********************************************************
cabbrev w!! w !sudo tee % > /dev/null<CR>:e!<CR><CR>

" Quicker filetype setting:
"   :F html
" instead of
"   :set ft=html
" Can tab-complete filetype.
if version < 730
  command! -nargs=1 F set filetype=<args>
else
  command! -nargs=1 -complete=filetype F set filetype=<args>
endif

" Programmery *****************************************************************
let g:syntastic_check_on_open=0
let g:syntastic_enable_balloons=0
let g:syntastic_enable_signs=1

" NERDCommenter
let NERDSpaceDelims=1
map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <Esc><plug>NERDCommenterToggle<CR>i
map <Leader>[ <plug>NERDCommenterAlignLeft
map <Leader>] <plug>NERDCommenterUncomment

" Format JSON with yajl
nmap =j :%!json_reformat<CR>

" Format XML
function! DoPrettyXML()
  let l:origft = &ft
  set ft=
  silent %!xmllint --format -
  1
  exe "set ft=" . l:origft
endfunction
nmap =x :call DoPrettyXML()<CR>

" VIM-Gist ********************************************************************
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_show_privates = 1
let g:gist_post_private = 1

" Ansible
let g:ansible_attribute_highlight = "ab"
let g:ansible_name_highlight = 'b'
